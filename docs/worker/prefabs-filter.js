"use strict";(()=>{function w(){return new Promise(r=>requestAnimationFrame(r))}function g(r){console.error(r)}async function u(r){return await(await fetch(r)).json()}function x(r){let e=[];return()=>{switch(e.length){case 0:{let t=(async()=>{await r(),e.shift()})();return e.push(t),t}case 1:{let t=e[0],s=(async()=>{await t,await w(),await r(),e.shift()})();return e.push(s),s}case 2:return e[1];default:throw Error(`Unexpected state: promiceses=${e.length.toString()}`)}}}var L={en:"english",de:"german",es:"spanish",fr:"french",it:"italian",ja:"japanese",ko:"koreana",pl:"polish",pt:"brazilian",ru:"russian",tr:"turkish","zh-CN":"schinese","zh-TW":"tchinese"},k=["blocks","prefabs","shapes"],l=class r{static DEFAULT_LANGUAGE="english";#t;#e;#s;#r;constructor(e,t){this.#t=e,this.#e=E(t),this.#s=new Map(k.map(s=>[s,this.#a(r.DEFAULT_LANGUAGE,s)])),this.#r=this.#n()}get(e){let t=this.#r.get(e);if(!t)throw new Error(`No labels for ${this.#e}/${e}`);return t}set language(e){e!==this.#e&&(console.log("LabelHolder set language: %s -> %s",this.#e,e),this.#e=e,this.#r=this.#n())}#n(){return new Map(k.map(e=>[e,this.#i(e)]))}async#i(e){let t=this.#s.get(e);if(!t)throw new Error(`No fallback for ${this.#e}/${e}`);return new m(await this.#a(this.#e,e),await t)}async#a(e,t){return new Map(Object.entries(await u(`${this.#t}/${e}/${t}.json`)))}},m=class{#t;#e;constructor(e,t){this.#t=e,this.#e=t}get(e){return this.#t.get(e)??this.#e.get(e)}};function E(r){for(let e of r)for(let[t,s]of Object.entries(L))if(e.startsWith(t))return s;return l.DEFAULT_LANGUAGE}var c=class{all=[];filtered=[];markCoords=null;status="";#t={};#e;filter;throttledUpdater=x(()=>this.updateImmediately());updateListeners=[];constructor(e,t){this.#e=new l(e,t),this.filter=this.defaultMatcher()}set language(e){this.#e.language=e}set prefabsFilterString(e){let t=e.trim();t.length===0?this.filter=this.defaultMatcher():this.filter=new P(new RegExp(t,"i"),this.#e)}set blocksFilterString(e){let t=e.trim();t.length===0?this.filter=this.defaultMatcher():this.filter=new h(new RegExp(t,"i"),this.#t,this.#e)}set blockPrefabCounts(e){this.#t=e,this.filter instanceof h&&(this.filter=new h(this.filter.regexp,e,this.#e))}update(){this.throttledUpdater().catch(g)}async updateImmediately(){await this.applyFilter(),this.updateDist(),this.sort();let e={status:this.status,prefabs:this.filtered};this.updateListeners.forEach(t=>{t(e)})}addUpdateListener(e){this.updateListeners.push(e)}defaultMatcher(){return new b(this.#e)}async applyFilter(){let e=await this.filter.match(this.all);this.status=e.status,this.filtered=e.matched}updateDist(){if(this.markCoords){let{markCoords:e}=this;this.filtered.forEach(t=>t.dist=v(t,e))}else this.filtered.forEach(e=>e.dist=null)}sort(){this.markCoords?(this.status=`${this.status}, order by distances from the flag`,this.filtered.sort(M)):this.filtered.sort(p)}};function p(r,e){return r.name>e.name?1:r.name<e.name?-1:0}function M(r,e){return!r.dist||!e.dist?p(r,e):r.dist>e.dist?1:r.dist<e.dist?-1:p(r,e)}function v(r,e){return Math.round(Math.sqrt((r.x-e.x)**2+(r.z-e.z)**2))}function f(r,e){let t=!1,s=r.replace(e,n=>(t=n.length>0,`<mark>${n}</mark>`));return t?s:null}var b=class{labels;constructor(e){this.labels=e}async match(e){let t=await this.labels.get("prefabs");return{status:e.length===0?"No prefabs":"All prefabs",matched:e.map(s=>{let n=t.get(s.name)??"-";return{...s,highlightedName:s.name,highlightedLabel:n}})}}},P=class{regexp;labels;constructor(e,t){this.regexp=e,this.labels=t}async match(e){let t=await this.labels.get("prefabs"),s=e.flatMap(n=>{let a=f(n.name,this.regexp),i=t.get(n.name)??"-",o=i&&f(i,this.regexp);return a??o?{...n,highlightedName:a??n.name,highlightedLabel:o??i}:[]});return{status:`${s.length.toString()} matched prefabs`,matched:s}}},h=class{regexp;#t;labels;constructor(e,t,s){this.regexp=e,this.#t=t,this.labels=s}async match(e){let t=await this.matchBlocks();if(t.length===0)return{status:"No matched blocks",matched:[]};let s=this.matchPrefabTypes(t);if(Object.keys(s).length===0)return{status:`No prefabs, but ${t.length.toString()} matched blocks`,matched:[]};let n=await this.labels.get("prefabs"),a=e.flatMap(i=>{let o=s[i.name];return o?{...i,highlightedName:i.name,highlightedLabel:n.get(i.name)??"-",matchedBlocks:o}:[]});return{status:`${a.length.toString()} prefabs, ${t.length.toString()} matched blocks`,matched:a}}async matchBlocks(){let e=await this.labels.get("blocks"),t=await this.labels.get("shapes");return Object.entries(this.#t).flatMap(([s,n])=>{let a=f(s,this.regexp),i=e.get(s)??t.get(s)??"-",o=i&&f(i,this.regexp);return a??o?{name:s,highlightedName:a??s,highlightedLabel:o??i,prefabs:n}:[]})}matchPrefabTypes(e){return e.reduce((t,s)=>{if(!s.prefabs)return t;for(let[n,a]of Object.entries(s.prefabs))t[n]=(t[n]??[]).concat({...s,count:a});return t},{})}};var d=new c("../labels",navigator.languages);(async()=>{d.blockPrefabCounts=C(await u("../prefab-block-counts.json")),d.update()})().catch(g);onmessage=({data:r})=>{console.log("Prefab-filter received message: ",r),Object.assign(d,r).update()};d.addUpdateListener(r=>{console.log("Prefab-filter send message: ",r),postMessage(r)});function C(r){let e={};for(let[t,s]of Object.entries(r))for(let[n,a]of Object.entries(s))e[n]=Object.assign(e[n]??{},{[t]:a});return e}})();
//# sourceMappingURL=prefabs-filter.js.map
