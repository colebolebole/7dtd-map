{
  "version": 3,
  "sources": ["../../src/lib/utils.ts", "../../src/lib/labels.ts", "../../src/lib/errors.ts", "../../src/lib/events.ts", "../../src/lib/label-handler.ts", "../../src/prefabs/main.ts"],
  "sourcesContent": ["export function requireNonnull<T>(t: T | undefined | null, errorMessage = () => `Unexpected state: ${String(t)}`): T {\n  if (t == null) throw Error(errorMessage());\n  return t;\n}\n\nexport function strictParseInt(s: string | undefined | null, errorMessage = () => `Unexpected argument: ${String(s)}`): number {\n  const n = parseInt(s ?? \"\");\n  if (isNaN(n)) throw Error(errorMessage());\n  return n;\n}\n\nexport function requireType<T>(\n  o: unknown,\n  t: new (...a: unknown[]) => T,\n  errorMessage = () => `Unexpected type: expected as ${String(t)}, but actual type ${String(o)}`,\n): T {\n  if (o instanceof t) return o;\n  throw Error(errorMessage());\n}\n\nexport function component<T extends HTMLElement = HTMLElement>(id: string | undefined | null, t?: new (...a: unknown[]) => T): T {\n  const i = requireNonnull(id, () => \"Unexpected argument: id is null\");\n  const e = requireNonnull(document.getElementById(i), () => `Element not found: #${i}`);\n  return t ? requireType(e, t) : (e as T);\n}\n\nexport function removeAllChildren(e: HTMLElement): void {\n  while (e.lastChild) e.removeChild(e.lastChild);\n}\n\nexport function humanreadableDistance([direction, distance]: [Direction | null, number]): string {\n  const dir = direction ?? \"\";\n  if (distance < 1000) {\n    return `${dir} ${distance.toString()}m`;\n  }\n  return `${dir} ${(distance / 1000).toFixed(2)}km`;\n}\n\nexport function waitAnimationFrame(): Promise<number> {\n  return new Promise((r) => requestAnimationFrame(r));\n}\n\ninterface EventOffsets {\n  offsetX: number;\n  offsetY: number;\n}\n\nexport async function formatCoords(\n  map: GameMapSize | null,\n  canvas: HTMLCanvasElement,\n  elevation: (coods: GameCoords) => Promise<number | null>,\n  event: EventOffsets | null,\n): Promise<string> {\n  if (!event || !map) return \"E/W: -, N/S: -, Elev: -\";\n\n  const gameCoords = canvasEventToGameCoords(event, map, canvas);\n  if (gameCoords === null) return \"E/W: -, N/S: -, Elev: -\";\n\n  const y = (await elevation(gameCoords)) ?? \"-\";\n  return `E/W: ${gameCoords.x.toString()}, N/S: ${gameCoords.z.toString()}, Elev: ${y.toString()}`;\n}\n\nexport function downloadCanvasPng(fileName: string, canvas: HTMLCanvasElement): void {\n  const a = document.createElement(\"a\");\n  a.download = fileName;\n  a.href = canvas.toDataURL(\"image/png\");\n  a.click();\n}\n\nexport async function sleep(msec: number): Promise<void> {\n  return new Promise((r) => setTimeout(r, msec));\n}\n\nexport function gameMapSize(s: { width: number; height: number }): GameMapSize {\n  return { type: \"game\", ...s };\n}\n\nexport function gameCoords(c: { x: number; z: number }): GameCoords {\n  return { type: \"game\", ...c };\n}\n\n/** Returns null if the event was fired out of the canvas */\nexport function canvasEventToGameCoords(event: EventOffsets, mapSize: GameMapSize, canvasSize: HTMLCanvasElement): GameCoords | null {\n  // in-game scale coords with left-top offset\n  const gx = (event.offsetX * mapSize.width) / canvasSize.width;\n  const gz = (event.offsetY * mapSize.height) / canvasSize.height;\n  if (gx < 0 || gx >= mapSize.width || gz < 0 || gz >= mapSize.height) {\n    return null;\n  }\n\n  // in-game coords (center offset)\n  const x = gx - Math.floor(mapSize.width / 2);\n  const z = Math.floor(mapSize.height / 2) - gz;\n  return gameCoords({ x: Math.round(x), z: Math.round(z) });\n}\n\nexport function threePlaneSize(width: number, height: number): ThreePlaneSize {\n  return { type: \"threePlane\", width, height };\n}\n\nexport function printError(e: unknown): void {\n  console.error(e);\n}\n\nexport async function fetchJson<T>(url: string): Promise<T> {\n  const r = await fetch(url);\n  if (!r.ok) throw Error(`Failed to fetch ${url}: ${r.statusText}`);\n  return (await r.json()) as T;\n}\n\nexport function basename(path: string) {\n  return path.substring(path.lastIndexOf(\"/\") + 1);\n}\n\nexport async function readWholeStream(stream: ReadableStream<Uint8Array>): Promise<Uint8Array> {\n  return new Uint8Array(await new Response(stream).arrayBuffer());\n}\n", "import { fetchJson } from \"./utils\";\n\nexport const LANGUAGES = [\n  \"english\",\n  \"german\",\n  \"spanish\",\n  \"french\",\n  \"italian\",\n  \"japanese\",\n  \"koreana\",\n  \"polish\",\n  \"brazilian\",\n  \"russian\",\n  \"turkish\",\n  \"schinese\",\n  \"tchinese\",\n] as const;\nexport type Language = (typeof LANGUAGES)[number];\n\nconst LANGUAGE_TAGS: { [tag: string]: Language } = {\n  en: \"english\",\n  de: \"german\",\n  es: \"spanish\",\n  fr: \"french\",\n  it: \"italian\",\n  ja: \"japanese\",\n  ko: \"koreana\",\n  pl: \"polish\",\n  pt: \"brazilian\",\n  ru: \"russian\",\n  tr: \"turkish\",\n  \"zh-CN\": \"schinese\",\n  \"zh-TW\": \"tchinese\",\n};\n\nconst FILE_BASE_NAMES = [\"blocks\", \"prefabs\", \"shapes\"] as const;\ntype FileBaseName = (typeof FILE_BASE_NAMES)[number];\n\nexport class LabelHolder {\n  static DEFAULT_LANGUAGE: Language = \"english\";\n\n  #baseUrl: string;\n  #language: Language;\n  #fallbacks: Map<FileBaseName, Promise<Map<string, string>>>;\n  #labels: Map<FileBaseName, Promise<Labels>>;\n\n  constructor(baseUrl: string, navigatorLanguages: readonly string[]) {\n    this.#baseUrl = baseUrl;\n    this.#language = resolveLanguage(navigatorLanguages);\n    this.#fallbacks = new Map(FILE_BASE_NAMES.map((n) => [n, this.#fetchLabelMap(LabelHolder.DEFAULT_LANGUAGE, n)] as const));\n    this.#labels = this.#buildAllLabels();\n  }\n\n  get(fileId: FileBaseName): Promise<Labels> {\n    const labels = this.#labels.get(fileId);\n    if (!labels) throw new Error(`No labels for ${this.#language}/${fileId}`);\n    return labels;\n  }\n\n  set language(lang: Language) {\n    if (lang === this.#language) return;\n    console.log(\"LabelHolder set language: %s -> %s\", this.#language, lang);\n    this.#language = lang;\n    this.#labels = this.#buildAllLabels();\n  }\n\n  #buildAllLabels(): Map<FileBaseName, Promise<Labels>> {\n    return new Map(FILE_BASE_NAMES.map((n) => [n, this.#buildLabels(n)]));\n  }\n\n  async #buildLabels(fileBaseName: FileBaseName): Promise<Labels> {\n    const fallback = this.#fallbacks.get(fileBaseName);\n    if (!fallback) throw new Error(`No fallback for ${this.#language}/${fileBaseName}`);\n    return new Labels(await this.#fetchLabelMap(this.#language, fileBaseName), await fallback);\n  }\n\n  async #fetchLabelMap(language: Language, fileId: FileBaseName): Promise<Map<string, string>> {\n    return new Map(Object.entries(await fetchJson(`${this.#baseUrl}/${language}/${fileId}.json`)));\n  }\n}\n\nexport class Labels {\n  #labels: Map<string, string>;\n  #fallback: Map<string, string>;\n\n  constructor(labels: Map<string, string>, defaultLabels: Map<string, string>) {\n    this.#labels = labels;\n    this.#fallback = defaultLabels;\n  }\n\n  get(key: string): string | undefined {\n    return this.#labels.get(key) ?? this.#fallback.get(key);\n  }\n}\n\nexport function resolveLanguage(languages: readonly string[]): Language {\n  for (const clientTag of languages) {\n    for (const [tag, lang] of Object.entries(LANGUAGE_TAGS)) {\n      if (clientTag.startsWith(tag)) return lang;\n    }\n  }\n  return LabelHolder.DEFAULT_LANGUAGE;\n}\n", "export class MultipleErrors extends Error {\n  #causes;\n  constructor(errors: unknown[]) {\n    super(\"Multiple errors occurred\");\n    this.#causes = errors;\n  }\n\n  get causes() {\n    return this.#causes;\n  }\n}\n", "import { printError } from \"./utils\";\nimport { MultipleErrors } from \"./errors\";\n\nexport type MessageMap<N extends string> = { [K in N]?: object };\nexport type Listener<N extends string, M extends MessageMap<N>> = (m: M) => unknown;\n\nexport class ListenerManager<N extends string, M extends MessageMap<N>> {\n  #listeners: Listener<N, M>[] = [];\n\n  addListener(listener: Listener<N, M>) {\n    this.#listeners.push(listener);\n  }\n\n  removeListener(listener: Listener<N, M>) {\n    const index = this.#listeners.indexOf(listener);\n    if (index >= 0) this.#listeners.splice(index, 1);\n  }\n\n  async dispatch(m: M) {\n    const results = await Promise.allSettled(this.#listeners.map((fn) => fn(m)));\n    const errors = results.flatMap((r) => (r.status === \"rejected\" ? [r.reason as unknown] : []));\n    if (errors.length > 0) throw new MultipleErrors(errors);\n  }\n\n  dispatchNoAwait(m: M) {\n    this.dispatch(m).catch(printError);\n  }\n}\n", "import { LANGUAGES, Language, resolveLanguage } from \"./labels\";\nimport * as events from \"./events\";\n\ninterface Doms {\n  language: HTMLSelectElement;\n}\n\ninterface EventMessage {\n  update: { lang: Language };\n}\n\nexport class LabelHandler {\n  #doms: Doms;\n  #listener = new events.ListenerManager<\"update\", EventMessage>();\n\n  constructor(doms: Doms, navigatorLanguages: readonly string[]) {\n    this.#doms = doms;\n    this.buildSelectOptions(navigatorLanguages);\n    this.#doms.language.addEventListener(\"change\", () => {\n      this.#listener.dispatchNoAwait({ update: { lang: this.#doms.language.value as Language } });\n    });\n  }\n\n  private buildSelectOptions(navigatorLanguages: readonly string[]) {\n    const existingLangs = new Set(Array.from(this.#doms.language.options).map((o) => o.value));\n    for (const lang of LANGUAGES) {\n      if (existingLangs.has(lang)) {\n        continue;\n      }\n      const option = document.createElement(\"option\");\n      option.textContent = lang;\n      this.#doms.language.appendChild(option);\n    }\n\n    const browserLang = resolveLanguage(navigatorLanguages);\n    if (this.#doms.language.value !== browserLang) {\n      this.#doms.language.value = resolveLanguage(navigatorLanguages);\n      requestAnimationFrame(() => this.#doms.language.dispatchEvent(new Event(\"change\")));\n    }\n  }\n\n  addListener(fn: (m: EventMessage) => void | Promise<void>) {\n    this.#listener.addListener(fn);\n  }\n}\n", "import { LabelHandler } from \"../lib/label-handler\";\nimport { LabelHolder, Labels } from \"../lib/labels\";\nimport { component } from \"../lib/utils\";\n\nfunction main() {\n  const labelHolder = new LabelHolder(\"../labels\", navigator.languages);\n  const labelHandler = new LabelHandler({ language: component(\"label_lang\", HTMLSelectElement) }, navigator.languages);\n  labelHandler.addListener(async ({ update: { lang } }) => {\n    labelHolder.language = lang;\n    updatePrefabLabels(await labelHolder.get(\"prefabs\"));\n    udpateBlockLabels(await labelHolder.get(\"blocks\"), await labelHolder.get(\"shapes\"));\n  });\n}\n\nfunction updatePrefabLabels(labels: Labels) {\n  const name = document.querySelector(\".prefab_name\")?.textContent?.trim();\n  if (!name) return;\n  const labelEl = document.querySelector(\".prefab_label\");\n  if (!labelEl) return;\n  labelEl.textContent = labels.get(name) ?? \"-\";\n}\n\nfunction udpateBlockLabels(blockLabels: Labels, shapeLabels: Labels) {\n  for (const blockEl of component(\"blocks\", HTMLElement).querySelectorAll(\".block\")) {\n    const name = blockEl.querySelector(\".block_name\")?.textContent?.trim();\n    if (!name) continue;\n    const labelEl = blockEl.querySelector(\".block_label\");\n    if (!labelEl) continue;\n    labelEl.textContent = blockLabels.get(name) ?? shapeLabels.get(name) ?? \"-\";\n  }\n}\n\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", main);\n} else {\n  main();\n}\n"],
  "mappings": "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",
  "names": []
}
